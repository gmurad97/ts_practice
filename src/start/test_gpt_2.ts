// üü° –£—Ä–æ–≤–µ–Ω—å 2 ‚Äî –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
// 1. –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É interface –∏ type?
// –Ω–µ–∑–Ω–∞—é.–Ω–æ –æ—Ç–≤–µ—á—É —Ç–∞–∫ interface —ç—Ç–æ —Ç–æ —á—Ç–æ –º—ã –Ω–∞—Å–ª–µ–¥—É–µ–º –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º
// –∞ —Ç–∏–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–≤–Ω—ã–µ —Ç–∏–ø—ã

// 2. –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤? –ü—Ä–∏–º–µ—Ä?
// –î–∞ –º–æ–∂–Ω–æ
// interface A{
// 	a: string;
// }
// interface B {
// 	b: string;
// }
// interface C extends A,B{
// 	c: boolean;
// }

// 3. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥?
// type Status = "success" | "error" | "loading";
// let s: Status = "idle";
// –î–∞—Å—Ç –æ—à–∏–±–∫—É —Ç–∏–ø–∞, –ø—Ä–∏–º–µ—Ä —á—Ç–æ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç

// 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –≤ —Ç–∏–ø:
// const user = {
// 	id: 1,
// 	name: "Murad",
// 	isAdmin: false
// };
// type User = {
// 	id: number;
// 	name: string;
// 	isAdmin: boolean;
// }

// 5. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç keyof?
// keyof –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏ type –∏–ª–∏ inteface

// 6. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç?
// type A = { x: number };
// type B = A & { y: string };
// const obj: B = { x: 1, y: "hello" };
// console.log(obj.y);
//–æ—Ç–≤–µ—Ç hello

// 7. –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∏–ø never –∏ –∫–æ–≥–¥–∞ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?
// —Ç–∏–ø never –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç
// –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∏–∑ –∑–∞ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä

// 8. –ï—Å—Ç—å —Ç–∏–ø:
// type Point = { x: number, y: number; };
// –°–¥–µ–ª–∞–π —Ç–∏–ø, –≥–¥–µ –≤—Å–µ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ.
// type Point = { x?: number, y?: number; };

// 9. –ó–∞—á–µ–º –Ω—É–∂–µ–Ω –¥–∂–µ–Ω–µ—Ä–∏–∫ <T>?
// –Ω–µ–∑–Ω–∞—é

// 10. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –µ–≥–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// const firstElement = (arr: Array<undefined>): undefined => {
// 	return arr[0];
// };

// 11. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Record<Keys, Type>?
// –Ω–µ–∑–Ω–∞—é

// 12. –ï—Å—Ç—å enum Role { Admin, User, Guest }. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç:
// enum Role {
// 	Admin,
// 	User,
// 	Guest
// }
// console.log(Role[1]);
// Admin - 0
// User - 1 - –±—É–¥–µ—Ç User
// Guest - 2

// 13. –ù–∞–ø–∏—à–∏ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –¥–µ–ª–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è readonly.
// type User = {
// 	readonly id: number;
// 	readonly name: string;
// 	readonly email: string;
// }

// 14. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä in –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∏–ø–∞–º–∏?
// –Ω–µ–∑–Ω–∞—é

// 15. –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É extends –≤ –∫–ª–∞—Å—Å–µ –∏ extends –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–∞—Ö?
// –Ω–µ–∑–Ω–∞—é


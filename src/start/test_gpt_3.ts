// üî¥ –£—Ä–æ–≤–µ–Ω—å 3 ‚Äî –¢—è–∂—ë–ª—ã–π
// 1. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø?
// type Nullable<T> = T | null;
// –Ω–µ–∑–Ω–∞—é

// 2. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç infer –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞—Ö? –ü—Ä–∏–º–µ—Ä?
// –Ω–µ–∑–Ω–∞—é –Ω–æ –∑–Ω–∞—é —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤

// 3. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥?
// type T1 = string extends string | number ? "yes" : "no";
// —É –Ω–∞—Å –∏–º–µ–µ—Ç—Å—è —Ç–∏–ø T1 —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—à–∏—Ä—è–µ—Ç string –∏ –ø–æ–ª–µ number –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç yes/no

// 4. –ï—Å—Ç—å —Ç–∏–ø:
// type User = { id: number; name: string; email: string; };
// –°–æ–∑–¥–∞–π —Ç–∏–ø –±–µ–∑ email.
// type User = {
// 	id: number;
// 	name: string;
// 	email: string;
// }

// type User1 = {
// 	id: number;
// 	name: string;
// }

// 5. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç TypeScript?
// type A = { a: number };
// type B = { b: string };
// type C = A & B;
// const val: C = { a: 1, b: "hi" };
// a: 1, b: "hi"

// 6. –ù–∞–ø–∏—à–∏ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –∏–∑ —Ç–∏–ø–∞ T –¥–µ–ª–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è optional, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ string.
// –Ω–µ–∑–Ω–∞—é

// 7. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç utility type Exclude<T, U>?
// –Ω–µ–∑–Ω–∞—é

// 8. –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É Partial<T> –∏ Required<T>?
// –Ω–µ–∑–Ω–∞—é / –Ω–æ —á–∏—Å—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–µ—à—É partial —á–∞—Å—Ç–∏—á–Ω–æ –∏ required –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã

// 9. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç ReturnType<T>? –ü—Ä–∏–º–µ—Ä?
//–Ω–µ–∑–Ω–∞—é —Å–∫–æ—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø

// 10. –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç?
// type Fn = (a: number, b: string) => boolean;
// type Params = Parameters<Fn>;
// –Ω–µ–∑–Ω–∞—é